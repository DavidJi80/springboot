<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60" debug="false">
    <!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
    <!--scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
    <!--debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->

    <contextName>hello_logback</contextName>
    <!--每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。-->
    <property name="LOG_HOME" value="D:/"/>
    <!--用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。来使用变量-->

    <!--
    日志输出到控制台
    appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，
    常用就是控制台输出策略和文件输出策略。
    -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>error</level>
        </filter>
        -->
        <!--ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n
            </pattern>
        </encoder>
        <!--encoder表示对日志进行编码：
            %d{HH: mm:ss.SSS}——日志输出时间
            %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
            %-5level——日志级别，并且使用5个字符靠左对齐
            %logger{36}——日志输出者的名字
            %msg——日志消息
            %n——平台的换行符
        -->
    </appender>

    <!--
    日志输出到文件
    随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。
    RollingFileAppender用于切分文件日志
    -->
    <appender name="rollingFile"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>${LOG_HOME}/hello-world.log</file>-->
        <file>hello-world.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/logs/hello-world-%d{yyyy-MM-dd_HH-mm}.log</fileNamePattern>
            <!--定义了日志的切分方式——把每一天的日志归档到一个文件中，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。-->
            <maxHistory>5</maxHistory>
            <!--表示只保留最近30天的日志，以防止日志填满整个磁盘空间-->
            <totalSizeCap>1GB</totalSizeCap>
            <!--用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。-->
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!--root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。-->
    <root>
        <level value="info"/>
        <!--
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL，默认是DEBUG。
        可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
        -->
        <appender-ref ref="console"/>
        <appender-ref ref="rollingFile"/>
    </root>


    <!--
    loger用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
    <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
    -->
    <logger name="com.github.davidji80.springboot.helloworld.controller" level="info" additivity="false">
        <!--
        name:用来指定受此loger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
        addtivity:是否向上级loger传递打印信息。默认是true。
        -->
        <appender-ref ref="console"/>
    </logger>

    <springProfile name="test,dev">
        <root>
            <level value="warn"/>
            <!--level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL，默认是DEBUG。-->
            <!--可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。-->
            <appender-ref ref="console"/>
            <appender-ref ref="rollingFile"/>
        </root>
        <logger name="com.github" level="warn"></logger>
    </springProfile>
    <springProfile name="prod">
        <root>
            <level value="error"/>
            <!--level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL，默认是DEBUG。-->
            <!--可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。-->
            <appender-ref ref="console"/>
            <appender-ref ref="rollingFile"/>
        </root>
        <logger name="com.github" level="error"></logger>
    </springProfile>
</configuration>