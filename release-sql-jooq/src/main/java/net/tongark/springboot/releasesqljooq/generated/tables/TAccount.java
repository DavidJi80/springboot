/*
 * This file is generated by jOOQ.
 */
package net.tongark.springboot.releasesqljooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import net.tongark.springboot.releasesqljooq.generated.Keys;
import net.tongark.springboot.releasesqljooq.generated.Test01;
import net.tongark.springboot.releasesqljooq.generated.tables.records.AccountRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TAccount extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 1120441562;

    /**
     * The reference instance of <code>test01.t_account</code>
     */
    public static final TAccount T_ACCOUNT = new TAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>test01.t_account.id</code>.
     */
    public final TableField<AccountRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test01.t_account.name</code>.
     */
    public final TableField<AccountRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>test01.t_account</code> table reference
     */
    public TAccount() {
        this(DSL.name("t_account"), null);
    }

    /**
     * Create an aliased <code>test01.t_account</code> table reference
     */
    public TAccount(String alias) {
        this(DSL.name(alias), T_ACCOUNT);
    }

    /**
     * Create an aliased <code>test01.t_account</code> table reference
     */
    public TAccount(Name alias) {
        this(alias, T_ACCOUNT);
    }

    private TAccount(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private TAccount(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TAccount(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, T_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return Test01.TEST01;
    }

    @Override
    public Identity<AccountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_ACCOUNT;
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.KEY_T_ACCOUNT_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.KEY_T_ACCOUNT_PRIMARY);
    }

    @Override
    public TAccount as(String alias) {
        return new TAccount(DSL.name(alias), this);
    }

    @Override
    public TAccount as(Name alias) {
        return new TAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TAccount rename(String name) {
        return new TAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TAccount rename(Name name) {
        return new TAccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
